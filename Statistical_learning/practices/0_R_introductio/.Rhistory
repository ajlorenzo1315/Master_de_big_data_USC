3-3i
3**3
3^3
3**3
#Funciones basicas
log(3)
sqrt(3)
#cargar librerias
#instalar librerias
install.packages("openintro")
#cargar libreras
library(openintro)
#cargar librerias
#instalar librerias
install.packages("openintro")
#cargar librerias
#instalar librerias
install.packages(c("usdata", "ggplot2", "readr", "rmarkdown", "tibble"))
install.packages("openintro")
#Operaciones basicas
3+3
3-3i
#multiplicación
3*3
#potencia
3^3
3**3
#Funciones basicas
log(3)
sqrt(3)
#cargar librerias
#instalar librerias
install.packages(c("usdata", "ggplot2", "readr", "rmarkdown", "tibble"))
install.packages("openintro")
#cargar librerias
#instalar librerias
#install.packages(c("usdata", "ggplot2", "readr", "rmarkdown", "tibble"))
install.packages("openintro")
#cargar librerias
#instalar librerias
#install.packages(c("usdata", "ggplot2", "readr", "rmarkdown", "tibble"))
install.packages("openintro")
#cargar librerias
#instalar librerias
#install.packages(c("usdata", "ggplot2", "readr", "rmarkdown", "tibble"))
install.packages("openintro")
#cargar libreras
library(openintro)
head(email)
# optengo los datos asociados a la columna spam
email$spam
# Tamaño del vector
length(email$spam)
# Para optner ayda sobre algo
?email
help((email))
# tabal de frecuencia absoluta
table(email$spam)
# tabla de fecuencia relativa spam
table(email$spam)/length(email$spam)
# tabla de fecuencia relativa formato (es la tabla que sale a )
table(email$spam)/length(email$spam)
# Gráfico de barras
barplot(table(email$spam))
# Gráfico de tartas /sectores
pie(table(email$spam))
#histograma agrupa directamente me crea las categorias entre 0-20
# mi te da una idea de la forma
#no tiene una forma simetrica
hist(email$num_char)
# diagrama de cajas
boxplot(email$num_char)
boxplot(email$num_char,ylim=c(0,50))
# media
mean(email$num_char)
#mediana
# el 50 % de los email tiene menos de 5.856 * 10³
median(email$num_char)
# medir dispersión si da valores pequeños todos los valores cerca de la media
# varianza
var(email$num_char)
# desviación tipica  es la raiz cuadrada de la varianza tiene la misma magnitud
sqrt( var(email$num_char))
sd(email$num_char)
# asimetria
install.packages("moments")
library(moments)
skewness(email$num_char)
library(moments)
skewness(email$num_char)
#cuantiles
# siempre ordena de mas pequeño a mas grande
quantiles(email$num_char,0.25)
# Diagrama de disoersión
plot(email$num_char,email$line_breaks)
#cuantiles
# siempre ordena de mas pequeño a mas grande
quantile(email$num_char,0.25)
# Diagrama de disoersión
plot(email$num_char,email$line_breaks)
# Regrasión lineal
reglin=lm(email$line_breaks-email$num_char)
abline(reglin,col=2,lwd=2)
#Guardar un elemento
elem=3
# forma formal de guerda un elemento
elem<-3
# R distingue entre mayusculas y minusculas
Elem= 4
elem= 4
# Crear vectores
vect<-c(3,2,4)
# R hacce operaciones elemento a elemento
3*vect
#
vect2=c('si','no')
#Cambiar directiro de trabajo a donde estan los datos
setwd("/home/alourido/Escritorio/Master_de_big_data_USC/Statistical_learning/practices/1_R_introductio")
#Cambiar directiro de trabajo a donde estan los datos
setwd("/home/alourido/Escritorio/Master_de_big_data_USC/Statistical_learning/practices/1_R_introductio")
#Cargar datos de advertising.cvs
datos=read.csv("Advertising.csv")
hist(datos$sales)
View(datos)
hist(datos$Sales)
# otra manera de hacesrlo
# creamos un vector vacio numerico
meanv=numeric()
# generamos un bucle que guarda la media de los datos genereados para generar mil medias
for (i in 1:1000){
datos=rnorm(20, mean=2, sd=1)
meanv[i]=mean(datos)
}
quantiles(meanv)
quantile(meanv)
# si aunemeto n estare mas cerca del 2 pasamos de 20 a 200
# creamos un vector vacio numerico
meanv=numeric()
# generamos un bucle que guarda la media de los datos genereados para generar mil medias
for (i in 1:1000){
datos=rnorm(200, mean=2, sd=1)
meanv[i]=mean(datos)
}
quantiles(meanv)
quantile(meanv)
quantile(meanv)
# si aunemeto n estare mas cerca del 2 pasamos de 20 a 20000
# creamos un vector vacio numerico
meanv=numeric()
# generamos un bucle que guarda la media de los datos genereados para generar mil medias
for (i in 1:1000){
datos=rnorm(20000, mean=2, sd=1)
meanv[i]=mean(datos)
}
quantile(meanv)
hist(meanvs)
hist(meanv)
# si aunemeto n estare mas cerca del 2 pasamos de 20 a 20000
# creamos un vector vacio numerico
meanv=numeric()
# generamos un bucle que guarda la media de los datos genereados para generar mil medias
for (i in 1:1000){
datos=rnorm(20000, mean=2, sd=1)
meanv[i]=mean(datos)
}
quantile(meanv)
hist(meanv)
# si aunemeto n estare mas cerca del 2 pasamos de 20 a 200
# creamos un vector vacio numerico
meanv=numeric()
# generamos un bucle que guarda la media de los datos genereados para generar mil medias
for (i in 1:1000){
datos=rnorm(200, mean=2, sd=1)
meanv[i]=mean(datos)
}
quantile(meanv)
for (i in 1:1000){
datos=rnorm(20000, mean=2, sd=1)
ttt=t.test(datos)
tt[i]=(ttt$conf.int[1]&(2<ttt$conf.int[2]))
}
# para generar intervalos de confianza es
tt=numeric()
for (i in 1:1000){
datos=rnorm(20000, mean=2, sd=1)
ttt=t.test(datos)
tt[i]=(ttt$conf.int[1]&(2<ttt$conf.int[2]))
}
table(tt)
tt[i]=(ttt$conf.int[1]<2)&(2<ttt$conf.int[2]))
tt[i]=(ttt$conf.int[1]<2)&(2<ttt$conf.int[2])
for (i in 1:1000){
datos=rnorm(20000, mean=2, sd=1)
ttt=t.test(datos)
tt[i]=(ttt$conf.int[1]<2)&(2<ttt$conf.int[2])
}
table(tt)
# quiero saner si p>0.5
# en nuestro caso 13 con cebolla de un total de 20
# H1: p>0.-5
# hay que meter numero de exito y tamaño muestral
prop.test(13,20)
# quiero confirmar si h1 es cierto de decir si H1:p0.5
prop.test(13,20,alternative="greater")
# solo si esta por debajo de mi erro
# p- valor< alpha
# alpha error que asimimos en la hipotesis en la que H0 sea cierta escogemos H1
# p-value = 0.1318 >0.05
# En este caso no podemos admitir el error
# con datos del cis seisa
prop.test(3195,4538,alternative="greater")
for (i in 1:1000){
datos=rnorm(20000, mean=2, sd=1)
ttt=t.test(datos)
# para saber si 2 esta dentro del intervalo de confiaza delos datos generados como sabemos que la medias 2 dos
# vemos cuantas veces 2 esta dentro del intervalo de congianza
tt[i]=(ttt$conf.int[1]<2)&(2<ttt$conf.int[2])
}
# en este caso  p-value < 2.2e-16 por lo cual podemos considerar que segun el cis
# puedo decir que la mayoria preferie con cebolla
prop.test(3195,4538)
# en este caso  p-value < 2.2e-16 por lo cual podemos considerar que segun el cis
# puedo decir que la mayoria preferie con cebolla
prop.test(3195,4538)
# para generar intervalos de confianza es
pvv=numeric()
for (i in 1:1000){
datos=rnorm(20000, mean=2, sd=1)
# contras te si la verdadera media es distinto de 2
ttt=t.test(datos,mu)
pvv[i]=ttt$p.value
}
for (i in 1:1000){
datos=rnorm(20000, mean=2, sd=1)
# contras te si la verdadera media es distinto de 2
ttt=t.test(datos,mu=2)
pvv[i]=ttt$p.value
}
summary(pvv)
# contras te si la verdadera media es distinto de 2
ttt=t.test(datos,mu=2)
pvv[i]=ttt$p.value
for (i in 1:1000){
datos=rnorm(200, mean=2, sd=1)
# contras te si la verdadera media es distinto de 2
ttt=t.test(datos,mu=2)
pvv[i]=ttt$p.value
}
for (i in 1:1000){
datos=rnorm(200, mean=2, sd=1)
# contras te si la verdadera media es distinto de 2
ttt=t.test(datos,mu=2)
pvv[i]=ttt$p.value
}
summary(pvv)
table(pvv<0.5)
# para generar intervalos de confianza es
pvv=numeric()
for (i in 1:1000){
datos=rnorm(200, mean=2, sd=1)
# contras te si la verdadera media es distinto de 2
ttt=t.test(datos,mu=2)
pvv[i]=ttt$p.value
}
summary(pvv)
table(pvv<0.5)
table(pvv<0.05)
